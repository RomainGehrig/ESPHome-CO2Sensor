esphome:
  name: co2sensor

esp32:
  board: lolin32
  framework:
    type: arduino

globals:
  - id: fast_poll_on
    type: bool
    initial_value: 'false'

api:
  port: 6053
  reboot_timeout: 0s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  reboot_timeout: 0s

ota:
  safe_mode: true
  password: !secret ota_password

font:
  - file: 'fonts/PragmataPro.ttf'
    id: font1
    size: 16

  - file: 'fonts/PragmataPro.ttf'
    id: font_small
    size: 12

  - file: 'fonts/PragmataPro.ttf'
    id: font_tiny
    size: 10

i2c:
  sda: 5
  scl: 4

switch:
  - platform: template
    id: hourly_graph
    name: "Hourly graph"
    optimistic: true

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    id: screen
    pages:
      - lambda: |-
          if (id(co2).has_state()) {
            it.printf(0, 13, id(font_small), TextAlign::BASELINE_LEFT , "%.0f ppm", id(co2).state);
          }

          if (id(temperature).has_state()) {
            it.printf(0, 26, id(font_small), TextAlign::BASELINE_LEFT , "%.1fÂ°C", id(temperature).state);
          }

          if (id(humidity).has_state()) {
            it.printf(0, 39, id(font_small), TextAlign::BASELINE_LEFT , "%.2f%%", id(humidity).state);
          }

          if (id(ip_address).has_state()) {
            it.printf(0, 64, id(font_tiny), TextAlign::BASELINE_LEFT, "%s", id(ip_address).state.c_str());
          } else {
            it.print(0, 64, id(font_tiny), TextAlign::BASELINE_LEFT, "No WiFi");
          }

          if (id(hourly_graph).state) {
            it.graph(52, 0, id(co2graph));
            it.print(100, 64, id(font_tiny), TextAlign::BASELINE_RIGHT, "2 h");
          } else {
            it.graph(52, 0, id(co2graph_small));
            it.print(100, 64, id(font_tiny), TextAlign::BASELINE_RIGHT, "20 min");
          }

          auto poll_txt = id(fast_poll_on) ? "5s": "60s";
          it.print(102, 64, id(font_tiny), TextAlign::BASELINE_LEFT, poll_txt);


graph:
  - id: co2graph_small
    sensor: co2
    duration: 20min
    width: 76
    height: 48
    min_value: 400
    max_value: 2000
    y_grid: 400
    x_grid: 5min
    border: true
  - id: co2graph
    sensor: co2
    duration: 2h
    width: 76
    height: 48
    min_value: 400
    max_value: 2000
    y_grid: 400
    x_grid: 15min
    border: true

sensor:
  - platform: scd4x
    id: sdc40
    measurement_mode: periodic
    update_interval: 60s
    co2:
      name: "Office CO2"
      id: "co2"
      on_value:
        then:
          - lambda: |-
              float co2 = std::min(float(1800), x);
              auto t = (co2-440)/(1800 - 440);
              auto interpolated = ESPHSVColor(uint8_t((1-t)*96), 255, 32);
              auto inter_rgb = interpolated.to_rgb();

              auto call = id(co2light).turn_on();
              call.set_rgb(inter_rgb.red / 255.0, inter_rgb.green / 255.0, inter_rgb.blue / 255.0);
              call.set_brightness(0.3);
              call.perform();

    temperature:
      name: "Office Temperature"
      id: "temperature"
    humidity:
      name: "Office Humidity"
      id: "humidity"

interval:
  - interval: 5s
    then:
      - if:
          condition:
            lambda: return id(fast_poll_on);
          then:
            - component.update: sdc40

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO25
      mode:
        input: true
        pulldown: true
    id: "btn"
    name: "Breadboard button"
    filters:
      - delayed_on: 10ms
    on_click:
      - switch.toggle: hourly_graph

text_sensor:
  - platform: wifi_info
    ip_address:
      name: ESP IP Address
      id: ip_address
    ssid:
      name: ESP Connected SSID
      id: wifi_ssid

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO2
    num_leds: 1
    name: "CO2 LED"
    id: co2light
    entity_category: diagnostic
